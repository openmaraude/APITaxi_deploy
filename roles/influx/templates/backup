#!/usr/bin/env python3

#
# This file is installed by Ansible. ** DO NOT ** edit manually.
#

import argparse
import datetime
import logging
import os
import shutil
import subprocess
import sys


logger = logging.getLogger(__name__)


def write_status(backup_path, output, ret=0):
    """Write backup status to a file."""
    status_filename = os.path.join(backup_path, 'RESULT.txt')
    logger.info('Backup status written to %s', status_filename)
    with open(status_filename, 'w+') as handle:
        handle.write('Command status code: %s\nCommand output:\n' % ret)
        handle.flush()
        handle.buffer.write(output)


def build_backup_cmdline(path, host, port, database=None):
    """Return the cmdline used to backup database."""
    cmdline = ['influxd', 'backup', '-portable', '-host', '%s:%s' % (host, port), path]
    if database:
        cmdline.extend(['-database', database])
    return cmdline


def remove_old_backups(host_path, max_backups):
    logger.info('Removing old backups...')
    directories = sorted(os.listdir(host_path))
    to_remove = directories[:-max_backups]

    for path in to_remove:
        logger.info('-> %s', os.path.join(host_path, path))
        shutil.rmtree(os.path.join(host_path, path))


def backup(args):
    now = datetime.datetime.now().strftime('%Y-%m-%d_at_%H:%M:%S')
    host_path = os.path.join(args.backup_dir, args.host)
    backup_path = os.path.abspath(os.path.join(host_path, now))

    logger.info('Backup %s into %s ...', args.host, backup_path)
    os.makedirs(backup_path, exist_ok=True)

    try:
        cmdline = build_backup_cmdline(backup_path, args.host, args.port, database=args.database)
        output = subprocess.check_output(cmdline, stderr=subprocess.STDOUT)
        logger.info('done!')
        write_status(backup_path, output)
        if args.max_backups:
            remove_old_backups(host_path, args.max_backups)
        return 0
    except subprocess.CalledProcessError as exc:
        write_status(backup_path, exc.output, ret=exc.returncode)
        return 1


def main():
    logging.basicConfig(level=logging.INFO, format='%(message)s')

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        '--host', help='Hostname to backup', required=True
    )
    parser.add_argument(
        '--port', type=int, help='Metadata port', default=8088
    )
    parser.add_argument(
        '--max-backups', type=int, help='Only keep this number of backups',
        default=None
    )
    parser.add_argument(
        '--database', help='Database to backup'
    )
    parser.add_argument(
        '--backup-dir', help='Backup directory',
        default=os.path.dirname(__name__)
    )
    args = parser.parse_args()
    ret = backup(args)
    sys.exit(ret)


if __name__ == '__main__':
    main()
